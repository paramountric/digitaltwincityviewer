networks:
  dtcv-platform:
    external: true
    name: supabase_network_dtcv-platform

services:
  speckle-ingress:
    build:
      context: .
      dockerfile: ./utils/docker-compose-ingress/Dockerfile
    platform: linux/amd64
    image: speckle/speckle-docker-compose-ingress:local
    restart: always
    ports:
      - '127.0.0.1:8080:8080'
    environment:
      FILE_SIZE_LIMIT_MB: '100'
      NGINX_ENVSUBST_OUTPUT_DIR: '/etc/nginx'
    networks: ['dtcv-platform']

  redis:
    image: 'redis:7-alpine'
    restart: always
    volumes:
      - ./volumes/redis-data:/data
    networks:
      - dtcv-platform

  speckle-frontend-2:
    image: speckle/speckle-frontend-2:2.23.5
    platform: linux/amd64
    restart: always
    environment:
      NUXT_PUBLIC_SERVER_NAME: 'local'
      NUXT_PUBLIC_API_ORIGIN: 'http://127.0.0.1:8080'
      NUXT_PUBLIC_BASE_URL: '/'
      NUXT_PUBLIC_BACKEND_API_ORIGIN: 'http://speckle-server:3000'
      NUXT_PUBLIC_LOG_LEVEL: 'debug'
      NUXT_REDIS_URL: ${REDIS_URL}
      LOG_LEVEL: 'debug'
      HOST: '0.0.0.0'
      PORT: '8080'
    networks: ['dtcv-platform']

  speckle-server:
    image: speckle/speckle-server:2.23.5
    platform: linux/amd64
    restart: always
    healthcheck:
      test:
        - CMD
        - /nodejs/bin/node
        - -e
        - "try { require('node:http').request({headers: {'Content-Type': 'application/json'}, port:3000, hostname:'127.0.0.1', path:'/readiness', method: 'GET', timeout: 2000 }, (res) => { body = ''; res.on('data', (chunk) => {body += chunk;}); res.on('end', () => {process.exit(res.statusCode != 200 || body.toLowerCase().includes('error'));}); }).end(); } catch { process.exit(1); }"
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 90s
    environment:
      CANONICAL_URL: 'http://127.0.0.1'
      FRONTEND_ORIGIN: 'http://127.0.0.1'
      SESSION_SECRET: ${JWT_SECRET}
      STRATEGY_LOCAL: 'true'
      LOG_LEVEL: 'info'
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      REDIS_URL: ${REDIS_URL}
      S3_ENDPOINT: 'http://minio:9000'
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-speckle-server}
      S3_CREATE_BUCKET: 'false'
      S3_REGION: ${S3_REGION:-eu-north-1}
      FILE_SIZE_LIMIT_MB: 100
      EMAIL_FROM: 'no-reply@example.org'
      USE_FRONTEND_2: true
      ONBOARDING_STREAM_URL: 'https://latest.speckle.systems/projects/843d07eb10'
    depends_on:
      redis:
        condition: service_healthy
    networks: ['dtcv-platform']

  preview-service:
    image: speckle/speckle-preview-service:2.23.5
    platform: linux/amd64
    restart: always
    mem_limit: '3000m'
    memswap_limit: '3000m'
    environment:
      HOST: '127.0.0.1'
      METRICS_HOST: '127.0.0.1'
      LOG_LEVEL: 'info'
      PG_CONNECTION_STRING: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      speckle-server:
        condition: service_healthy
    networks: ['dtcv-platform']

  webhook-service:
    image: speckle/speckle-webhook-service:2.23.5
    platform: linux/amd64
    restart: always
    environment:
      LOG_LEVEL: 'info'
      PG_CONNECTION_STRING: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      speckle-server:
        condition: service_healthy
    networks: ['dtcv-platform']

  fileimport-service:
    image: speckle/speckle-fileimport-service:2.23.5
    platform: linux/amd64
    restart: always
    environment:
      LOG_LEVEL: 'info'
      PG_CONNECTION_STRING: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      SPECKLE_SERVER_URL: 'http://speckle-server:3000'
      FILE_IMPORT_TIME_LIMIT_MIN: 10
    depends_on:
      speckle-server:
        condition: service_healthy
    networks: ['dtcv-platform']
